[{"E:\\mob-app1\\frontend\\src\\index.js":"1","E:\\mob-app1\\frontend\\src\\App.js":"2","E:\\mob-app1\\frontend\\src\\reportWebVitals.js":"3","E:\\mob-app1\\frontend\\src\\store.js":"4","E:\\mob-app1\\frontend\\src\\components\\PrivateRoute.js":"5","E:\\mob-app1\\frontend\\src\\screens\\Home.js":"6","E:\\mob-app1\\frontend\\src\\reducers\\oauthReducer.js":"7","E:\\mob-app1\\frontend\\src\\reducers\\nodeReducer.js":"8","E:\\mob-app1\\frontend\\src\\screens\\Links.js":"9","E:\\mob-app1\\frontend\\src\\constants\\nodeConstant.js":"10","E:\\mob-app1\\frontend\\src\\actions\\oauthAction.js":"11","E:\\mob-app1\\frontend\\src\\constants\\oauthConstant.js":"12","E:\\mob-app1\\frontend\\src\\actions\\nodeAction.js":"13"},{"size":558,"mtime":1610465119782,"results":"14","hashOfConfig":"15"},{"size":403,"mtime":1610715563299,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1699,"mtime":1611602910393,"results":"18","hashOfConfig":"15"},{"size":486,"mtime":1610532427479,"results":"19","hashOfConfig":"15"},{"size":2301,"mtime":1610707630742,"results":"20","hashOfConfig":"15"},{"size":530,"mtime":1610533437105,"results":"21","hashOfConfig":"15"},{"size":3426,"mtime":1611602911698,"results":"22","hashOfConfig":"15"},{"size":35808,"mtime":1611833667698,"results":"23","hashOfConfig":"15"},{"size":1284,"mtime":1611602912771,"results":"24","hashOfConfig":"15"},{"size":1076,"mtime":1611414263427,"results":"25","hashOfConfig":"15"},{"size":208,"mtime":1610533438405,"results":"26","hashOfConfig":"15"},{"size":5323,"mtime":1611602983014,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"4o0ge7",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"E:\\mob-app1\\frontend\\src\\index.js",[],["58","59"],"E:\\mob-app1\\frontend\\src\\App.js",[],"E:\\mob-app1\\frontend\\src\\reportWebVitals.js",[],"E:\\mob-app1\\frontend\\src\\store.js",[],"E:\\mob-app1\\frontend\\src\\components\\PrivateRoute.js",["60","61"],"import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const getOauth = useSelector((state) => state.getOauth)\r\n  const { loading, oauth, error } = getOauth\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        oauth ? <Redirect to='/graph' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n","E:\\mob-app1\\frontend\\src\\screens\\Home.js",["62","63","64","65","66"],"import React from 'react'\r\nimport GoogleLogin from 'react-google-login'\r\nimport { Grid, Container } from '@material-ui/core'\r\nimport googleimg from '../images/google.png'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport './home.css'\r\nimport { OauthLogin } from '../actions/oauthAction'\r\n\r\nconst Home = ({ history }) => {\r\n  const dispatch = useDispatch()\r\n  const getOauth = useSelector((state) => state.getOauth)\r\n  const { loading, oauth, error } = getOauth\r\n  const resgoogle = (response) => {\r\n    console.log(response)\r\n    console.log(\r\n      response.profileObj.email,\r\n      response.profileObj.name,\r\n      response.profileObj.imageUrl,\r\n      response.tokenObj.access_token,\r\n      response.tokenObj.expires_at,\r\n      response.tokenObj.expires_in\r\n    )\r\n    console.log(response.profileObj)\r\n    if (response) {\r\n      dispatch(\r\n        OauthLogin(\r\n          response.profileObj.name,\r\n          response.profileObj.email,\r\n          response.profileObj.imageUrl,\r\n          response.tokenObj.access_token,\r\n          response.tokenObj.expires_in,\r\n          response.tokenObj.expires_at\r\n        )\r\n      )\r\n      history.push('/graph')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <div className='hhh'>\r\n        <Container>\r\n          <div style={{ textAlign: 'center', height: 20 }}>\r\n            <h1>Netbook</h1>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n\r\n              justifyContent: 'center',\r\n              height: 'calc(100vh - 20px)',\r\n            }}\r\n          >\r\n            <h2>Login to your account</h2>\r\n            <div style={{ height: 15 }}></div>\r\n            <GoogleLogin\r\n              theme='dark'\r\n              className='button'\r\n              clientId='542443202716-1162el1e1nqk02h64h08frl40vsl5hgp.apps.googleusercontent.com'\r\n              buttonText='Login with Google'\r\n              onSuccess={resgoogle}\r\n              onFailure={resgoogle}\r\n              isSignedIn={true}\r\n              cookiePolicy={'single_host_origin'}\r\n            />\r\n          </div>\r\n        </Container>\r\n      </div>\r\n\r\n      <div style={{ flex: 1 }}>\r\n        <div className='img'></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","E:\\mob-app1\\frontend\\src\\reducers\\oauthReducer.js",[],"E:\\mob-app1\\frontend\\src\\reducers\\nodeReducer.js",[],"E:\\mob-app1\\frontend\\src\\screens\\Links.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import React, { useState, useEffect } from 'react'\r\n// import Sidebar from 'react-sidebar'\r\n// import SlidingPanel from 'react-sliding-side-panel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { GoogleLogout } from 'react-google-login'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat'\r\nimport TimelineIcon from '@material-ui/icons/Timeline'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nimport { Grid, Container, Modal, TextField, Button } from '@material-ui/core'\r\nimport {\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n  makeStyles,\r\n} from '@material-ui/core/styles'\r\n\r\n// import DeleteIcon from '@material-ui/icons/Delete'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { OauthLogout } from '../actions/oauthAction'\r\nimport TagsInput from 'react-tagsinput'\r\nimport './home.css'\r\nimport 'react-tagsinput/react-tagsinput.css' // If using WebPack and style-loader.\r\nimport {\r\n  NodeAdd,\r\n  Nodefetch,\r\n  EdgeAdd,\r\n  Edgefetch,\r\n  EdgeUpdate,\r\n  NodeUpdate,\r\n  NodeDeletion,\r\n  EdgeDeletion,\r\n} from '../actions/nodeAction'\r\nimport { Graph } from 'react-d3-graph'\r\n\r\nconst Links = ({ history }) => {\r\n  const [hid, setHid] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [openViewNode, setOpenViewNode] = useState(false)\r\n  const [openViewEdge, setOpenViewEdge] = useState(false)\r\n  const [openAddEdge, setOpenAddEdge] = useState(false)\r\n  const [haveupdateedge, setHaveupdateedge] = useState(false)\r\n  const [haveupdatenode, setHaveupdatenode] = useState(false)\r\n  const [newLinks, setNewLinks] = useState([])\r\n\r\n  const [tags, setTags] = useState([])\r\n  const [visi, setVisi] = useState(false)\r\n  const [visible, setVisiblity] = useState(false)\r\n  const [id, setId] = useState('')\r\n  const [updatenodeid, setUpdatenodeid] = useState('')\r\n  const [updatenodetype, setUpdatenodetype] = useState('')\r\n  const [updatenodetags, setUpdatenodetags] = useState([])\r\n  const [updateinputfields, setUpdateinputfields] = useState([])\r\n\r\n  const [haveedgedetails, setHaveedgedetails] = useState([])\r\n  const [type, setType] = useState('')\r\n  const [inputfields, setInputfields] = useState([])\r\n  const [openPanel, setOpenPanel] = useState(false)\r\n  const [popup, setPopup] = useState(false)\r\n  const [popdown, setPopdown] = useState(false)\r\n  const [attributes, setAttributes] = useState([])\r\n  const [updateattributes, setUpdateattributes] = useState([])\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [source, setSource] = useState()\r\n  const [target, setTarget] = useState()\r\n  const [edgetags, setEdgetags] = useState([])\r\n  const [updatesource, setUpdatesource] = useState('')\r\n  const [updatetarget, setUpdatetarget] = useState('')\r\n  const [updateedgetags, setUpdateedgetags] = useState([])\r\n  const [nodepopup, setNodepopup] = useState([])\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = useState(getModalStyle)\r\n  const dispatch = useDispatch()\r\n\r\n  const getOauth = useSelector((state) => state.getOauth)\r\n  const { loading: oauthloading, oauth, error: oautherror } = getOauth\r\n\r\n  const putNode = useSelector((state) => state.putNode)\r\n  const { loading, node, error: noderror } = putNode\r\n  const getNode = useSelector((state) => state.getNode)\r\n  const { loading: nodeloading, nodde, error: errror } = getNode\r\n\r\n  useEffect(() => {\r\n    if (oauth?._id) {\r\n      dispatch(Nodefetch(oauth._id))\r\n\r\n      console.log('hellowold', oauth._id)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let unmounted = false\r\n    if (!unmounted) {\r\n      console.log('nodde links', nodde?.links)\r\n      const links = []\r\n\r\n      if (nodde?.links.length > 0) {\r\n        nodde.links.map((link) => {\r\n          links.push({\r\n            edgeid: link.edgeid,\r\n            tags: link.tags,\r\n            source: link.source.id,\r\n            target: link.target.id,\r\n            _id: link._id,\r\n          })\r\n        })\r\n\r\n        setNewLinks(links)\r\n      }\r\n      console.log('ooooo', newLinks, nodde)\r\n    }\r\n    return () => {\r\n      unmounted = true\r\n    }\r\n  }, [nodde?.links])\r\n  useEffect(() => {\r\n    console.log('ooooo', newLinks)\r\n  }, [newLinks])\r\n\r\n  useEffect(() => {\r\n    setUpdatenodeid(nodepopup?.id)\r\n    setUpdatenodetype(nodepopup?.type)\r\n    setUpdatesource(haveedgedetails?.source)\r\n    setUpdatetarget(haveedgedetails?.target)\r\n    console.log('jo', haveedgedetails?.source)\r\n    // setUpdatenodetags(nodepopup?.tags)\r\n\r\n    // setUpdateedgetags(haveedgedetails?.tags)\r\n  }, [haveedgedetails, nodepopup])\r\n\r\n  useEffect(() => {\r\n    console.log('nodde being updated =>', nodde, newLinks)\r\n  }, [nodde])\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n  const updatetheedge = () => {\r\n    setHaveupdateedge(true)\r\n  }\r\n  const updatethenode = () => {\r\n    setHaveupdatenode(true)\r\n  }\r\n  const handleOpenViewNode = () => {\r\n    setOpenViewNode(true)\r\n  }\r\n  const handleOpenAddEdge = () => {\r\n    setOpenAddEdge(true)\r\n  }\r\n  const handleOpenViewEdge = () => {\r\n    setOpenViewEdge(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n    setOpenViewNode(false)\r\n    setOpenAddEdge(false)\r\n    setOpenViewEdge(false)\r\n    setHaveupdateedge(false)\r\n    setHaveupdatenode(false)\r\n  }\r\n\r\n  function rand() {\r\n    return Math.round(Math.random() * 20) - 10\r\n  }\r\n  const { innerWidth, innerHeight } = window\r\n\r\n  function getModalStyle() {\r\n    const { innerWidth, innerHeight } = window\r\n\r\n    console.log(innerWidth)\r\n    let top = 50,\r\n      left = innerWidth < 600 ? 0 : 50\r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${left}%, -${top}%)`,\r\n    }\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: innerWidth > 600 ? 600 : '100%',\r\n\r\n      backgroundColor: theme.palette.background.paper,\r\n      // border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      maxHeight: 'calc(100vh - 200px)',\r\n      overflow: 'auto !important',\r\n      top: '50%',\r\n    },\r\n    multilineColor: {\r\n      color: 'white',\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n      width: '100%',\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }))\r\n  const classes = useStyles()\r\n\r\n  const deleteanode = () => {\r\n    dispatch(NodeDeletion(nodepopup?._id))\r\n    handleClose()\r\n  }\r\n\r\n  const deleteaedge = () => {\r\n    dispatch(EdgeDeletion(haveedgedetails?._id))\r\n    handleClose()\r\n  }\r\n  const handleChange = (tags) => {\r\n    setTags(tags)\r\n  }\r\n  const handlenodeChange = (updatenodetags) => {\r\n    setUpdatenodetags(updatenodetags)\r\n  }\r\n  const handleChanges = (edgetags) => {\r\n    setEdgetags(edgetags)\r\n  }\r\n  const handleupdateChanges = (updateedgetags) => {\r\n    setUpdateedgetags(updateedgetags)\r\n  }\r\n\r\n  const handlechangeinput = (index, event) => {\r\n    const values = [...inputfields]\r\n    values[index][event.target.name] = event.target.value\r\n    setInputfields(values)\r\n    setAttributes(inputfields)\r\n  }\r\n  const handlechangeupdateinput = (index, event) => {\r\n    const values = [...updateinputfields]\r\n    values[index][event.target.name] = event.target.value\r\n    setUpdateinputfields(values)\r\n    setUpdateattributes(updateinputfields)\r\n  }\r\n\r\n  const handleclickfields = () => {\r\n    setInputfields([\r\n      ...inputfields,\r\n      { attributeName: '', attributeValue: '', attributeType: '' },\r\n    ])\r\n  }\r\n  const handleclickupdatefields = () => {\r\n    setUpdateinputfields([\r\n      ...updateinputfields,\r\n      { attributeName: '', attributeValue: '', attributeType: '' },\r\n    ])\r\n  }\r\n  const handlgeupdateedge = () => {\r\n    updatetheedge()\r\n  }\r\n  const handleupdatenode = () => {\r\n    updatethenode()\r\n  }\r\n\r\n  const inputfieldsremove = (index) => {\r\n    const values = [...inputfields]\r\n    values.splice(index, 1)\r\n    setInputfields(values)\r\n  }\r\n  const updateinputfieldsremove = (index) => {\r\n    const values = [...updateinputfields]\r\n    values.splice(index, 1)\r\n    setUpdateinputfields(values)\r\n  }\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(NodeAdd(oauth._id, id, type, tags, attributes))\r\n    dispatch(Nodefetch(oauth._id))\r\n    handleClose()\r\n    setId('')\r\n    setType('')\r\n    setTags([])\r\n    setInputfields([])\r\n  }\r\n  const submitupdatenodehandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(\r\n      NodeUpdate(\r\n        nodepopup?._id,\r\n        oauth._id,\r\n        updatenodeid,\r\n        updatenodetype,\r\n        updatenodetags,\r\n        updateattributes\r\n      )\r\n    )\r\n    dispatch(Nodefetch(oauth._id))\r\n    handleClose()\r\n  }\r\n  const submitedgehandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(EdgeAdd(oauth._id, source, target, edgetags))\r\n    dispatch(Nodefetch(oauth._id))\r\n    handleClose()\r\n    setSource('')\r\n    setTarget('')\r\n    setEdgetags([])\r\n  }\r\n  const submitupdateedgehandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      EdgeUpdate(\r\n        haveedgedetails?._id,\r\n        oauth._id,\r\n        updatesource,\r\n        updatetarget,\r\n        updateedgetags\r\n      )\r\n    )\r\n    dispatch(Nodefetch(oauth._id))\r\n    handleClose()\r\n  }\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>Add Node</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n          style={{ marginTop: -10, marginBottom: 10 }}\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n\r\n      <form onSubmit={submitHandler}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              style={{ color: 'black', width: '100%', marginTop: 9 }}\r\n              id='outlined-basic'\r\n              size='small'\r\n              label='Name'\r\n              value={id}\r\n              onChange={(e) => setId(e.target.value)}\r\n              variant='outlined'\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              style={{ width: '100%', marginTop: 9 }}\r\n              id='outlined-basic'\r\n              label='Type'\r\n              size='small'\r\n              value={type}\r\n              onChange={(e) => setType(e.target.value)}\r\n              variant='outlined'\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ height: 9 }}></div>\r\n        <TagsInput\r\n          style={{ color: 'black' }}\r\n          value={tags}\r\n          onChange={handleChange}\r\n        />\r\n        <div style={{ height: 9 }}></div>\r\n        {inputfields.map((inputfield, index) => (\r\n          <div\r\n            style={{ width: '100%', display: 'flex', marginBottom: 8 }}\r\n            key={index}\r\n          >\r\n            <Grid container spacing={1} style={{ flex: 1 }}>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeName'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Name'\r\n                  value={inputfield.attributeName}\r\n                  onChange={(event) => handlechangeinput(index, event)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeValue'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Value'\r\n                  value={inputfield.attributeValue}\r\n                  onChange={(event) => handlechangeinput(index, event)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeType'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Type'\r\n                  value={inputfield.attributeType}\r\n                  onChange={(event) => handlechangeinput(index, event)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <IconButton\r\n              size='small'\r\n              type='button'\r\n              onClick={() => inputfieldsremove(index)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </div>\r\n        ))}\r\n        <Button type='button' onClick={handleclickfields} color='primary'>\r\n          Add Attribute\r\n        </Button>\r\n        <Button\r\n          type='submit'\r\n          disabled={id === '' || type === '' || tags.length <= 0}\r\n        >\r\n          <div>Add Node</div>\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n\r\n  const blackTheme = createMuiTheme({\r\n    palette: { primary: { main: '#000000' } },\r\n  })\r\n  console.log('ppp', newLinks, nodde?.nodes)\r\n\r\n  const boddy = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>View Node</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n          style={{ marginTop: -10, marginBottom: 10 }}\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n      <Grid container>\r\n        <Grid xs={6}>\r\n          <p style={{ fontSize: 15 }}>\r\n            Name:\r\n            <span style={{ fontSize: 17, fontWeight: 500 }}>\r\n              {' '}\r\n              {nodepopup?.id}\r\n            </span>\r\n          </p>\r\n        </Grid>\r\n        <Grid xs={6}>\r\n          <p style={{ fontSize: 14 }}>\r\n            Type:{' '}\r\n            <span style={{ fontSize: 17, fontWeight: 500 }}>\r\n              {' '}\r\n              {nodepopup?.type}\r\n            </span>\r\n          </p>\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ height: 17 }}></div>\r\n      <p>\r\n        <span style={{ fontSize: 15 }}>Tags:</span>{' '}\r\n        {nodepopup?.tags?.map((tagg) => (\r\n          <>\r\n            <span\r\n              style={{\r\n                display: 'inline !important',\r\n                backgroundColor: 'black',\r\n                color: 'white',\r\n                padding: 3.1,\r\n                paddingLeft: 9,\r\n                paddingRight: 9,\r\n                minWidth: 400,\r\n                marginRight: 3.8,\r\n                borderRadius: 3.3,\r\n                textAlign: 'center',\r\n              }}\r\n            >\r\n              {tagg}\r\n            </span>\r\n          </>\r\n        ))}\r\n      </p>\r\n      <div style={{ height: 17 }}></div>\r\n      {nodepopup?.attributes?.length > 0 ? (\r\n        <table style={{ width: '100%' }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ fontWeight: 400, textAlign: 'left', fontSize: 16 }}>\r\n                Attribute Name\r\n              </th>\r\n              <th style={{ fontWeight: 400, textAlign: 'left', fontSize: 16 }}>\r\n                Attribute Value\r\n              </th>\r\n              <th style={{ fontWeight: 400, textAlign: 'left', fontSize: 16 }}>\r\n                Attribute Type\r\n              </th>\r\n            </tr>\r\n            <div style={{ height: 8 }}></div>\r\n          </thead>\r\n          <tbody>\r\n            {nodepopup?.attributes?.map((att) => (\r\n              <>\r\n                <tr>\r\n                  <td style={{ fontSize: 22 }}>{att.attributeName}</td>\r\n                  <td style={{ fontSize: 22 }}>{att.attributeType}</td>\r\n                  <td style={{ fontSize: 22 }}>{att.attributeValue}</td>\r\n                </tr>\r\n\r\n                {/* <Grid\r\n              style={{ display: 'flex', justifyContent: 'space-between' }}\r\n              container\r\n            >\r\n              <Grid item xs={4}>\r\n                <p style={{ fontSize: 20 }}>\r\n                  Attribute Name:\r\n                  <span style={{ fontWeight: 500 }}> {att.attributeName} </span>\r\n                </p>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <p style={{ fontSize: 20 }}>\r\n                  Attribute Type:\r\n                  <span style={{ fontWeight: 500 }}> {att.attributeType}</span>\r\n                </p>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <p style={{ fontSize: 20 }}>\r\n                  Attribute Value:\r\n                  <span style={{ fontWeight: 500 }}> {att.attributeValue}</span>\r\n                </p>\r\n              </Grid>\r\n            </Grid> */}\r\n                <div style={{ height: 12 }}></div>\r\n              </>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : null}\r\n      <Button type='button' onClick={handleupdatenode}>\r\n        Edit Node\r\n      </Button>\r\n      <Button type='button' onClick={deleteanode}>\r\n        Delete Node\r\n      </Button>\r\n    </div>\r\n  )\r\n  const boddddy = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>View Edge</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n          style={{ marginTop: -10, marginBottom: 10 }}\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n      <Grid container>\r\n        <Grid xs={6}>\r\n          <p style={{ fontSize: 15 }}>\r\n            Source:\r\n            <span style={{ fontSize: 17, fontWeight: 500 }}>\r\n              {' '}\r\n              {haveedgedetails?.source}\r\n            </span>\r\n          </p>\r\n        </Grid>\r\n        <Grid xs={6}>\r\n          <p style={{ fontSize: 14 }}>\r\n            Target:{' '}\r\n            <span style={{ fontSize: 17, fontWeight: 500 }}>\r\n              {' '}\r\n              {haveedgedetails?.target}\r\n            </span>\r\n          </p>\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ height: 17 }}></div>\r\n      <p>\r\n        <span style={{ fontSize: 15 }}>Tags:</span>{' '}\r\n        {haveedgedetails?.tags?.map((tagg) => (\r\n          <>\r\n            <span\r\n              style={{\r\n                display: 'inline !important',\r\n                backgroundColor: 'black',\r\n                color: 'white',\r\n                padding: 3.1,\r\n\r\n                paddingLeft: 9,\r\n                paddingRight: 9,\r\n                minWidth: 400,\r\n                marginRight: 3.8,\r\n                borderRadius: 3.3,\r\n                textAlign: 'center',\r\n              }}\r\n            >\r\n              {tagg}\r\n            </span>\r\n          </>\r\n        ))}\r\n      </p>\r\n      <div style={{ height: 17 }}></div>\r\n      <Button type='button' onClick={handlgeupdateedge}>\r\n        Edit Edge\r\n      </Button>\r\n      <Button type='button' onClick={deleteaedge}>\r\n        Delete Edge\r\n      </Button>\r\n    </div>\r\n  )\r\n\r\n  const bodddy = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>Add Edge</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n          style={{ marginTop: -10, marginBottom: 10 }}\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n      <form onSubmit={submitedgehandler}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={6}>\r\n            <FormControl\r\n              className={classes.formControl}\r\n              variant='outlined'\r\n              size='small'\r\n            >\r\n              <InputLabel id='demo-simple-select-label'>Source</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={source}\r\n                onChange={(e) => setSource(e.target.value)}\r\n              >\r\n                {nodde?.nodes?.map((idd) => (\r\n                  <MenuItem value={idd._id}>{idd.id}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl\r\n              className={classes.formControl}\r\n              variant='outlined'\r\n              size='small'\r\n            >\r\n              <InputLabel id='demo-simple-select-label'>Target</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={target}\r\n                onChange={(e) => setTarget(e.target.value)}\r\n              >\r\n                {nodde?.nodes?.map((idd) => (\r\n                  <MenuItem value={idd._id}>{idd.id}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ height: 9 }}></div>\r\n        <TagsInput\r\n          style={{ color: 'black' }}\r\n          value={edgetags}\r\n          onChange={handleChanges}\r\n        />\r\n        <Button\r\n          type='submit'\r\n          disabled={source === '' || target === '' || edgetags.length <= 0}\r\n        >\r\n          <div>Add Edge</div>\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n  const bodddddy = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>Update Edge</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n      <form onSubmit={submitupdateedgehandler}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id='demo-simple-select-label'>Edit Source</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={updatesource}\r\n                onChange={(e) => setUpdatesource(e.target.value)}\r\n              >\r\n                {nodde?.nodes?.map((idd) => (\r\n                  <MenuItem value={idd._id}>{idd.id}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id='demo-simple-select-label'>Edit Target</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={updatetarget}\r\n                onChange={(e) => setUpdatetarget(e.target.value)}\r\n              >\r\n                {nodde?.nodes?.map((idd) => (\r\n                  <MenuItem value={idd._id}>{idd.id}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ height: 9 }}></div>\r\n        <TagsInput\r\n          style={{ color: 'black' }}\r\n          value={updateedgetags}\r\n          onChange={handleupdateChanges}\r\n        />\r\n        <Button\r\n          type='submit'\r\n          disabled={\r\n            updatesource === '' ||\r\n            updatetarget === '' ||\r\n            updateedgetags.length <= 0\r\n          }\r\n        >\r\n          <div>Edit Edge</div>\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n  const bodddddddy = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <h2 id='simple-modal-title'>Update Node</h2>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color='inherit'\r\n          aria-label='open drawer'\r\n        >\r\n          <ClearIcon style={{ color: 'grey' }} />\r\n        </IconButton>\r\n      </div>\r\n      <form onSubmit={submitupdatenodehandler}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              style={{ color: 'black', width: '100%', marginTop: 9 }}\r\n              id='outlined-basic'\r\n              size='small'\r\n              label='Name'\r\n              value={updatenodeid}\r\n              onChange={(e) => setUpdatenodeid(e.target.value)}\r\n              variant='outlined'\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              style={{ width: '100%', marginTop: 9 }}\r\n              id='outlined-basic'\r\n              label='Type'\r\n              size='small'\r\n              value={updatenodetype}\r\n              onChange={(e) => setUpdatenodetype(e.target.value)}\r\n              variant='outlined'\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ height: 9 }}></div>\r\n        <TagsInput\r\n          style={{ color: 'black' }}\r\n          value={updatenodetags ? updatenodetags : null}\r\n          onChange={handlenodeChange}\r\n        />\r\n        <div style={{ height: 9 }}></div>\r\n        {updateinputfields?.map((updateinputfield, index) => (\r\n          <div\r\n            style={{ width: '100%', display: 'flex', marginBottom: 8 }}\r\n            key={index}\r\n          >\r\n            <Grid container spacing={1} style={{ flex: 1 }}>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeName'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Name'\r\n                  value={updateinputfield.attributeName}\r\n                  onChange={(event) => handlechangeupdateinput(index, event)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeValue'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Value'\r\n                  value={updateinputfield.attributeValue}\r\n                  onChange={(event) => handlechangeupdateinput(index, event)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  name='attributeType'\r\n                  label='Type'\r\n                  size='small'\r\n                  variant='outlined'\r\n                  label='Attribute Type'\r\n                  value={updateinputfield.attributeType}\r\n                  onChange={(event) => handlechangeupdateinput(index, event)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <IconButton\r\n              size='small'\r\n              type='button'\r\n              onClick={() => updateinputfieldsremove(index)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </div>\r\n        ))}\r\n        <Button type='button' onClick={handleclickupdatefields} color='primary'>\r\n          Update Attribute\r\n        </Button>\r\n        <Button\r\n          type='submit'\r\n          disabled={\r\n            updatenodeid === '' ||\r\n            updatenodetype === '' ||\r\n            updatenodetags.length <= 0\r\n          }\r\n        >\r\n          <div>Edit Node</div>\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n\r\n  const data = {\r\n    nodes: newLinks && nodde?.nodes ? nodde?.nodes : [],\r\n    links: newLinks && nodde?.nodes ? newLinks : [],\r\n    // { source: 'Harry', target: 'Sally' },\r\n    // { source: 'Harry', target: 'Alice' },\r\n  }\r\n\r\n  const myConfig = {\r\n    nodeHighlightBehavior: true,\r\n    directed: true,\r\n    node: {\r\n      color: '#3A4A57',\r\n      size: 550,\r\n      highlightStrokeColor: 'blue',\r\n      fontSize: 18,\r\n    },\r\n    link: {\r\n      highlightColor: 'lightblue',\r\n      size: 1500,\r\n      strokeWidth: 2.4,\r\n      color: '#6F93B0',\r\n    },\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('hero', nodepopup)\r\n  }, [nodepopup])\r\n\r\n  useEffect(() => {\r\n    console.log('heeeero', haveedgedetails?._id)\r\n  }, [haveedgedetails])\r\n  const onClickNode = (nodeId) => {\r\n    handleOpenViewNode()\r\n    setPopup(true)\r\n    const nodedetails = nodde?.nodes?.filter((node) => node.id === nodeId)[0]\r\n    console.log('ab', nodedetails)\r\n\r\n    setNodepopup(nodedetails)\r\n  }\r\n\r\n  const onClickLink = (source, target) => {\r\n    handleOpenViewEdge()\r\n    const edgedetails = newLinks?.filter((link) => link.target === target)[0]\r\n    console.log('ew', edgedetails)\r\n    setHaveedgedetails(edgedetails)\r\n    console.log('heeero', haveedgedetails)\r\n  }\r\n\r\n  const showtheVisiblity = () => {\r\n    setHid(true)\r\n  }\r\n\r\n  const onSetSidebarOpen = () => {\r\n    setSidebarOpen(true)\r\n  }\r\n\r\n  const showmodal = () => {\r\n    handleOpen()\r\n    setPopup(false)\r\n  }\r\n  const addedgemodal = () => {\r\n    handleOpenAddEdge()\r\n    setPopdown(true)\r\n  }\r\n\r\n  const logout = () => {\r\n    dispatch(OauthLogout())\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <nav\r\n        className='navbar'\r\n        style={{\r\n          backgroundColor: 'rgb(32,32,32)',\r\n          width: '100%',\r\n          height: 70,\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <div style={{ display: 'flex' }}>\r\n          <IconButton\r\n            className='menuicon'\r\n            onClick={() => setVisiblity((visiblity) => !visiblity)}\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n          >\r\n            <MenuIcon style={{ color: 'grey' }} />\r\n          </IconButton>\r\n          <h3\r\n            className='netbook'\r\n            style={{ color: 'white', display: 'flex', alignItems: 'center' }}\r\n          >\r\n            Netbook\r\n          </h3>\r\n        </div>\r\n        <div className='filterfield'>\r\n          <TextField\r\n            style={{\r\n              color: 'white',\r\n              backgroundColor: 'rgb(18,18,18)',\r\n              display: 'flex',\r\n            }}\r\n            label='Filter'\r\n            fullWidth\r\n            margin='normal'\r\n            // onChange={}\r\n            size='small'\r\n            variant='outlined'\r\n            InputProps={{\r\n              className: classes.multilineColor,\r\n\r\n              endAdornment: (\r\n                <InputAdornment position='end'>\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className='gbtn' style={{ display: 'flex', alignItems: 'center' }}>\r\n          <GoogleLogout\r\n            className='gg'\r\n            color='white'\r\n            theme='dark'\r\n            clientId='542443202716-1162el1e1nqk02h64h08frl40vsl5hgp.apps.googleusercontent.com'\r\n            buttonText='Logout'\r\n            onLogoutSuccess={logout}\r\n          ></GoogleLogout>\r\n        </div>\r\n      </nav>\r\n\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          height: 'calc(100vh - 70px)',\r\n          backgroundColor: 'rgba(230, 230, 230,1)',\r\n        }}\r\n      >\r\n        <div\r\n          className={visible ? 'showsidebar' : 'hidesidebar'}\r\n          style={{\r\n            marginTop: 15,\r\n            marginLeft: 12,\r\n            borderRadius: 8,\r\n\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'start',\r\n            height: 'calc(100vh - 100px)',\r\n            transition: '0.3s',\r\n            // position: 'absolute',\r\n            // zIndex: 1,\r\n            // height: '100vh',\r\n            // justifyContent: 'space-between',\r\n            backgroundColor: 'white',\r\n          }}\r\n        >\r\n          <div\r\n            className='firsticon'\r\n            style={{ display: 'flex', alignItems: 'center', marginTop: 10 }}\r\n          >\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <TimelineIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Graph View</p>\r\n          </div>\r\n          <div\r\n            onClick={showmodal}\r\n            style={{ display: 'flex', alignItems: 'center' }}\r\n          >\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <AddIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Add Node</p>\r\n          </div>\r\n          <div\r\n            onClick={addedgemodal}\r\n            style={{ display: 'flex', alignItems: 'center' }}\r\n          >\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <TrendingFlatIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Add Edge</p>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <SearchIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Queries</p>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <FormatListBulletedIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Feed View</p>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <IconButton color='inherit' aria-label='open drawer'>\r\n              <PersonIcon style={{ color: 'grey' }} />\r\n            </IconButton>\r\n            <p className={visible ? 'slide' : 'hidetext'}>Profile</p>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {body}\r\n        </Modal>\r\n        <Modal\r\n          open={openViewNode}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {boddy}\r\n        </Modal>\r\n        <Modal\r\n          open={openAddEdge}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {bodddy}\r\n        </Modal>\r\n        <Modal\r\n          open={openViewEdge}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {boddddy}\r\n        </Modal>\r\n        <Modal\r\n          open={haveupdateedge}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {bodddddy}\r\n        </Modal>\r\n        <Modal\r\n          open={haveupdatenode}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n        >\r\n          {bodddddddy}\r\n        </Modal>\r\n        <div className='graph'>\r\n          <Graph\r\n            id='graph-id' // id is mandatory\r\n            data={data}\r\n            config={myConfig}\r\n            onClickNode={onClickNode}\r\n            onClickLink={onClickLink}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Links\r\n","E:\\mob-app1\\frontend\\src\\constants\\nodeConstant.js",[],"E:\\mob-app1\\frontend\\src\\actions\\oauthAction.js",[],"E:\\mob-app1\\frontend\\src\\constants\\oauthConstant.js",[],"E:\\mob-app1\\frontend\\src\\actions\\nodeAction.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":7,"column":11,"nodeType":"109","messageId":"110","endLine":7,"endColumn":18},{"ruleId":"107","severity":1,"message":"111","line":7,"column":27,"nodeType":"109","messageId":"110","endLine":7,"endColumn":32},{"ruleId":"107","severity":1,"message":"112","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"113","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":12,"column":11,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"114","line":12,"column":20,"nodeType":"109","messageId":"110","endLine":12,"endColumn":25},{"ruleId":"107","severity":1,"message":"111","line":12,"column":27,"nodeType":"109","messageId":"110","endLine":12,"endColumn":32},{"ruleId":"107","severity":1,"message":"115","line":18,"column":8,"nodeType":"109","messageId":"110","endLine":18,"endColumn":22},{"ruleId":"107","severity":1,"message":"116","line":21,"column":8,"nodeType":"109","messageId":"110","endLine":21,"endColumn":13},{"ruleId":"107","severity":1,"message":"117","line":23,"column":16,"nodeType":"109","messageId":"110","endLine":23,"endColumn":25},{"ruleId":"107","severity":1,"message":"118","line":25,"column":3,"nodeType":"109","messageId":"110","endLine":25,"endColumn":16},{"ruleId":"107","severity":1,"message":"119","line":40,"column":3,"nodeType":"109","messageId":"110","endLine":40,"endColumn":12},{"ruleId":"107","severity":1,"message":"120","line":49,"column":10,"nodeType":"109","messageId":"110","endLine":49,"endColumn":13},{"ruleId":"107","severity":1,"message":"121","line":59,"column":10,"nodeType":"109","messageId":"110","endLine":59,"endColumn":14},{"ruleId":"107","severity":1,"message":"122","line":59,"column":16,"nodeType":"109","messageId":"110","endLine":59,"endColumn":23},{"ruleId":"107","severity":1,"message":"123","line":70,"column":10,"nodeType":"109","messageId":"110","endLine":70,"endColumn":19},{"ruleId":"107","severity":1,"message":"124","line":70,"column":21,"nodeType":"109","messageId":"110","endLine":70,"endColumn":33},{"ruleId":"107","severity":1,"message":"125","line":71,"column":10,"nodeType":"109","messageId":"110","endLine":71,"endColumn":15},{"ruleId":"107","severity":1,"message":"126","line":72,"column":10,"nodeType":"109","messageId":"110","endLine":72,"endColumn":17},{"ruleId":"107","severity":1,"message":"127","line":75,"column":10,"nodeType":"109","messageId":"110","endLine":75,"endColumn":21},{"ruleId":"107","severity":1,"message":"128","line":88,"column":20,"nodeType":"109","messageId":"110","endLine":88,"endColumn":32},{"ruleId":"107","severity":1,"message":"129","line":88,"column":48,"nodeType":"109","messageId":"110","endLine":88,"endColumn":58},{"ruleId":"107","severity":1,"message":"108","line":91,"column":11,"nodeType":"109","messageId":"110","endLine":91,"endColumn":18},{"ruleId":"107","severity":1,"message":"130","line":91,"column":20,"nodeType":"109","messageId":"110","endLine":91,"endColumn":24},{"ruleId":"107","severity":1,"message":"131","line":91,"column":33,"nodeType":"109","messageId":"110","endLine":91,"endColumn":41},{"ruleId":"107","severity":1,"message":"132","line":93,"column":20,"nodeType":"109","messageId":"110","endLine":93,"endColumn":31},{"ruleId":"107","severity":1,"message":"133","line":93,"column":47,"nodeType":"109","messageId":"110","endLine":93,"endColumn":53},{"ruleId":"134","severity":1,"message":"135","line":101,"column":6,"nodeType":"136","endLine":101,"endColumn":8,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":110,"column":32,"nodeType":"140","messageId":"141","endLine":110,"endColumn":34},{"ruleId":"134","severity":1,"message":"142","line":127,"column":6,"nodeType":"136","endLine":127,"endColumn":20,"suggestions":"143"},{"ruleId":"134","severity":1,"message":"144","line":145,"column":6,"nodeType":"136","endLine":145,"endColumn":13,"suggestions":"145"},{"ruleId":"107","severity":1,"message":"146","line":175,"column":12,"nodeType":"109","messageId":"110","endLine":175,"endColumn":16},{"ruleId":"107","severity":1,"message":"147","line":178,"column":23,"nodeType":"109","messageId":"110","endLine":178,"endColumn":34},{"ruleId":"107","severity":1,"message":"147","line":181,"column":25,"nodeType":"109","messageId":"110","endLine":181,"endColumn":36},{"ruleId":"148","severity":1,"message":"149","line":398,"column":19,"nodeType":"150","endLine":398,"endColumn":41},{"ruleId":"148","severity":1,"message":"149","line":409,"column":19,"nodeType":"150","endLine":409,"endColumn":42},{"ruleId":"148","severity":1,"message":"149","line":420,"column":19,"nodeType":"150","endLine":420,"endColumn":41},{"ruleId":"107","severity":1,"message":"151","line":448,"column":9,"nodeType":"109","messageId":"110","endLine":448,"endColumn":19},{"ruleId":"148","severity":1,"message":"149","line":830,"column":19,"nodeType":"150","endLine":830,"endColumn":41},{"ruleId":"148","severity":1,"message":"149","line":841,"column":19,"nodeType":"150","endLine":841,"endColumn":42},{"ruleId":"148","severity":1,"message":"149","line":852,"column":19,"nodeType":"150","endLine":852,"endColumn":41},{"ruleId":"107","severity":1,"message":"152","line":932,"column":9,"nodeType":"109","messageId":"110","endLine":932,"endColumn":25},{"ruleId":"107","severity":1,"message":"153","line":936,"column":9,"nodeType":"109","messageId":"110","endLine":936,"endColumn":25},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'Grid' is defined but never used.","'googleimg' is defined but never used.","'oauth' is assigned a value but never used.","'FormHelperText' is defined but never used.","'Alert' is defined but never used.","'Container' is defined but never used.","'ThemeProvider' is defined but never used.","'Edgefetch' is defined but never used.","'hid' is assigned a value but never used.","'visi' is assigned a value but never used.","'setVisi' is assigned a value but never used.","'openPanel' is assigned a value but never used.","'setOpenPanel' is assigned a value but never used.","'popup' is assigned a value but never used.","'popdown' is assigned a value but never used.","'sidebarOpen' is assigned a value but never used.","'oauthloading' is assigned a value but never used.","'oautherror' is assigned a value but never used.","'node' is assigned a value but never used.","'noderror' is assigned a value but never used.","'nodeloading' is assigned a value but never used.","'errror' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'oauth._id'. Either include them or remove the dependency array.","ArrayExpression",["156"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'newLinks' and 'nodde'. Either include them or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'newLinks'. Either include it or remove the dependency array.",["158"],"'rand' is defined but never used.","'innerHeight' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'blackTheme' is assigned a value but never used.","'showtheVisiblity' is assigned a value but never used.","'onSetSidebarOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [dispatch, oauth._id]",{"range":"165","text":"166"},"Update the dependencies array to be: [newLinks, nodde, nodde.links]",{"range":"167","text":"168"},"Update the dependencies array to be: [newLinks, nodde]",{"range":"169","text":"170"},[4213,4215],"[dispatch, oauth._id]",[4803,4817],"[newLinks, nodde, nodde.links]",[5352,5359],"[newLinks, nodde]"]